# Generated by Django 4.2.8 on 2023-12-22 05:46

from django.db import migrations
from django.conf import settings
import json
from books.management.commands.get_books_from_tululu import JSON_PATH
import os
from django.core.files import File
from datetime import date, timedelta, datetime
from random import randint, randrange, uniform

MIN_DATE = date(1800, 1, 1)
MAX_DATE = date(1980, 1, 1)


def normalize_fullname(author: str) -> str:
    fullname_parts = author.strip().split()
    fullname_parts = [part.strip().capitalize() for part in fullname_parts]
    return ' '.join(fullname_parts)

def generate_birhdate_and_year_published():
    days_between = (MAX_DATE - MIN_DATE).days
    random_number_of_days = randrange(days_between)
    birhdate = MIN_DATE + timedelta(days=random_number_of_days)
    date_published = birhdate + timedelta(days=365*randint(20, 50))
    year_published = min(date_published, datetime.now().date()).year
    return birhdate, year_published


def load_books(apps, schema_editor):
    Book = apps.get_model('books', 'Book')
    Genre = apps.get_model('books', 'Genre')
    Author = apps.get_model('books', 'Author')

    json_path = os.path.join(settings.BOOKS_DIR, JSON_PATH)
    with open(json_path, 'r') as file:
        books_json = json.load(file)

    for book in books_json:
        title = book.get('title')
        author_name = book.get('author')
        img_src = book.get('img_src')
        book_path = book.get('book_path')
        genre_names = book.get('genres')
        author_name = normalize_fullname(author_name)
        image_name = os.path.basename(img_src)
        text_name = os.path.basename(book_path)
        rating = randint(30, 100) / 10
        birtdate, year = generate_birhdate_and_year_published()

        author = Author.objects.get_or_create(fullname=author_name, birtdate=birtdate)[0]
        genres = [Genre.objects.get_or_create(name=genre_name)[0] for genre_name in genre_names]
        
        with open(img_src, 'rb') as img_file, open(book_path, 'rb') as txt_file:
            book_obj = Book.objects.get_or_create(
                title=title,
                author=author,
                cover=File(img_file, image_name),
                text=File(txt_file, text_name),
                year_published=year,
                rating=rating
            )[0]
            book_obj.genres.set(genres)

        
class Migration(migrations.Migration):
    dependencies = [
        ("books", "0002_book_cover_alter_author_birthdate_and_more"),
    ]

    operations = [migrations.RunPython(load_books)]
